'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  TrendingUp, 
  DollarSign, 
  Users, 
  Star,
  Target,
  Clock,
  MessageSquare,
  Award,
  Download,
  Share,
  Eye,
  CheckCircle,
  ArrowUp,
  ArrowDown
} from 'lucide-react';
import { resultsTracker } from '@/lib/analytics/results-tracker';

interface MetricCard {
  title: string;
  value: string | number;
  change?: number;
  icon: any;
  color: string;
  description: string;
}

export function ResultsTrackingDashboard() {
  const [metrics, setMetrics] = useState<any>(null);
  const [topPerformers, setTopPerformers] = useState<any[]>([]);
  const [testimonialCandidates, setTestimonialCandidates] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedTimeframe, setSelectedTimeframe] = useState<'7d' | '30d' | '90d'>('30d');

  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    setLoading(true);
    try {
      const [aggregateMetrics, performers, candidates] = await Promise.all([
        resultsTracker.getAggregateMetrics(),
        resultsTracker.getTopPerformers(5),
        resultsTracker.identifyTestimonialCandidates()
      ]);

      setMetrics(aggregateMetrics);
      setTopPerformers(performers);
      setTestimonialCandidates(candidates);
    } catch (error) {
      console.error('Error loading dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateReport = async () => {
    try {
      const report = await generateCustomerReport();
      
      // Download as file
      const blob = new Blob([report], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `supportiq-results-${new Date().toISOString().split('T')[0]}.md`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error generating report:', error);
    }
  };

  const generateCustomerReport = async (): Promise<string> => {
    const timestamp = new Date().toISOString();
    
    return `# SupportIQ Customer Results Report
Generated: ${timestamp}

## Overall Impact
- **Total Customers Tracked:** ${metrics?.totalCustomers || 0}
- **Average Deflection Rate:** ${metrics?.avgDeflectionRate || 0}%
- **Total Cost Savings:** $${metrics?.totalSavings?.toLocaleString() || 0}
- **Avg Satisfaction Improvement:** +${metrics?.avgSatisfactionImprovement || 0} points

## Recent Growth (Last 7 Days)
- **New Active Customers:** ${metrics?.recentGrowth?.newCustomers || 0}
- **Tickets Processed:** ${metrics?.recentGrowth?.totalTicketsProcessed || 0}
- **Tickets Deflected:** ${metrics?.recentGrowth?.totalTicketsDeflected || 0}

## Top Performing Customers
${topPerformers.map((customer, index) => `
### ${index + 1}. ${customer.company}
- **Deflection Rate:** ${customer.metrics.deflectionRate.toFixed(1)}%
- **Total Savings:** $${customer.metrics.totalSavings.toLocaleString()}
- **Satisfaction Improvement:** +${customer.metrics.satisfactionImprovement.toFixed(1)} points
- **Time to Value:** ${customer.metrics.timeToFirstValue} days
`).join('')}

## Testimonial Ready Customers
${testimonialCandidates.slice(0, 3).map(customer => `
### ${customer.company}
- **Results:** ${customer.metrics.deflectionRate.toFixed(1)}% deflection, $${customer.metrics.totalSavings.toLocaleString()} saved
- **Status:** Ready for case study
`).join('')}

---
Report generated by SupportIQ Results Tracking System`;
  };

  const metricCards: MetricCard[] = [
    {
      title: 'Total Customers',
      value: metrics?.totalCustomers || 0,
      change: metrics?.recentGrowth?.newCustomers || 0,
      icon: Users,
      color: 'blue',
      description: 'Active customers being tracked'
    },
    {
      title: 'Avg Deflection Rate',
      value: `${metrics?.avgDeflectionRate || 0}%`,
      icon: Target,
      color: 'green',
      description: 'Average ticket deflection across all customers'
    },
    {
      title: 'Total Savings Generated',
      value: `$${metrics?.totalSavings?.toLocaleString() || 0}`,
      icon: DollarSign,
      color: 'emerald',
      description: 'Cumulative cost savings for all customers'
    },
    {
      title: 'Testimonials Ready',
      value: metrics?.testimonialsReady || 0,
      icon: Star,
      color: 'orange',
      description: 'Customers ready for case studies'
    }
  ];

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading results tracking data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Results Tracking</h1>
          <p className="text-gray-600 mt-1">Real-time customer success metrics and ROI validation</p>
        </div>
        <div className="flex gap-2">
          <Button onClick={handleGenerateReport} variant="outline">
            <Download className="w-4 h-4 mr-2" />
            Export Report
          </Button>
          <Button onClick={loadDashboardData}>
            <Eye className="w-4 h-4 mr-2" />
            Refresh Data
          </Button>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {metricCards.map((metric, index) => (
          <Card key={index} className="hover:shadow-lg transition-all">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className={`w-10 h-10 bg-${metric.color}-100 rounded-lg flex items-center justify-center`}>
                  <metric.icon className={`w-5 h-5 text-${metric.color}-600`} />
                </div>
                <div className="flex-1">
                  <div className="text-2xl font-bold">{metric.value}</div>
                  <div className="text-sm text-gray-600">{metric.title}</div>
                  {metric.change !== undefined && (
                    <div className={`text-xs flex items-center gap-1 mt-1 ${
                      metric.change > 0 ? 'text-green-600' : 'text-gray-500'
                    }`}>
                      {metric.change > 0 ? <ArrowUp className="w-3 h-3" /> : ''}
                      {metric.change > 0 ? `+${metric.change} this week` : 'No change'}
                    </div>
                  )}
                </div>
              </div>
              <p className="text-xs text-gray-500 mt-2">{metric.description}</p>
            </CardContent>
          </Card>
        ))}
      </div>

      <Tabs defaultValue="performers" className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="performers">Top Performers</TabsTrigger>
          <TabsTrigger value="testimonials">Testimonial Ready</TabsTrigger>
          <TabsTrigger value="insights">Success Insights</TabsTrigger>
        </TabsList>

        <TabsContent value="performers">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Award className="w-5 h-5" />
                Top Performing Customers
              </CardTitle>
              <CardDescription>
                Customers showing exceptional results with SupportIQ
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {topPerformers.map((customer, index) => (
                  <div key={customer.userId} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50">
                    <div className="flex-1">
                      <div className="flex items-center gap-3">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                          index === 0 ? 'bg-yellow-100 text-yellow-800' :
                          index === 1 ? 'bg-gray-100 text-gray-800' :
                          index === 2 ? 'bg-orange-100 text-orange-800' :
                          'bg-blue-100 text-blue-800'
                        }`}>
                          #{index + 1}
                        </div>
                        <div>
                          <div className="font-medium">{customer.company}</div>
                          <div className="text-sm text-gray-600">{customer.email}</div>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-6 text-sm">
                      <div className="text-center">
                        <div className="font-bold text-green-600">{customer.metrics.deflectionRate.toFixed(1)}%</div>
                        <div className="text-xs text-gray-500">Deflection</div>
                      </div>
                      <div className="text-center">
                        <div className="font-bold text-blue-600">${customer.metrics.totalSavings.toLocaleString()}</div>
                        <div className="text-xs text-gray-500">Saved</div>
                      </div>
                      <div className="text-center">
                        <div className="font-bold text-purple-600">+{customer.metrics.satisfactionImprovement.toFixed(1)}</div>
                        <div className="text-xs text-gray-500">Satisfaction</div>
                      </div>
                      <Button size="sm" variant="outline">
                        <Share className="w-4 h-4 mr-1" />
                        Share
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="testimonials">
          <div className="grid gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <MessageSquare className="w-5 h-5" />
                  Ready for Testimonials ({testimonialCandidates.length})
                </CardTitle>
                <CardDescription>
                  Customers with exceptional results ready for case studies
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {testimonialCandidates.map((customer) => (
                    <div key={customer.userId} className="p-4 border rounded-lg bg-gradient-to-r from-green-50 to-blue-50">
                      <div className="flex items-center justify-between mb-3">
                        <div>
                          <div className="font-medium text-lg">{customer.company}</div>
                          <div className="text-sm text-gray-600">{customer.email}</div>
                        </div>
                        <Badge className="bg-green-100 text-green-800">
                          <CheckCircle className="w-3 h-3 mr-1" />
                          Testimonial Ready
                        </Badge>
                      </div>
                      
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                        <div className="text-center p-2 bg-white rounded">
                          <div className="text-xl font-bold text-green-600">{customer.metrics.deflectionRate.toFixed(1)}%</div>
                          <div className="text-xs text-gray-500">Ticket Deflection</div>
                        </div>
                        <div className="text-center p-2 bg-white rounded">
                          <div className="text-xl font-bold text-blue-600">${customer.metrics.totalSavings.toLocaleString()}</div>
                          <div className="text-xs text-gray-500">Total Savings</div>
                        </div>
                        <div className="text-center p-2 bg-white rounded">
                          <div className="text-xl font-bold text-purple-600">+{customer.metrics.satisfactionImprovement.toFixed(1)}</div>
                          <div className="text-xs text-gray-500">Satisfaction</div>
                        </div>
                        <div className="text-center p-2 bg-white rounded">
                          <div className="text-xl font-bold text-orange-600">{customer.dataPoints}</div>
                          <div className="text-xs text-gray-500">Data Points</div>
                        </div>
                      </div>

                      <div className="flex gap-2">
                        <Button size="sm" className="bg-green-600 hover:bg-green-700">
                          <MessageSquare className="w-4 h-4 mr-2" />
                          Request Testimonial
                        </Button>
                        <Button size="sm" variant="outline">
                          <Award className="w-4 h-4 mr-2" />
                          Create Case Study
                        </Button>
                        <Button size="sm" variant="outline">
                          <Share className="w-4 h-4 mr-2" />
                          Generate Success Story
                        </Button>
                      </div>
                    </div>
                  ))}
                  
                  {testimonialCandidates.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <MessageSquare className="w-12 h-12 mx-auto mb-4 opacity-50" />
                      <p>No customers ready for testimonials yet.</p>
                      <p className="text-sm">Customers become testimonial-ready when they achieve 40%+ deflection rate with significant savings.</p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="insights">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Success Patterns</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <span>Avg Time to First Value</span>
                    <span className="font-bold">
                      {topPerformers.length > 0 
                        ? Math.round(topPerformers.reduce((sum, c) => sum + c.metrics.timeToFirstValue, 0) / topPerformers.length)
                        : 0
                      } days
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>Best Deflection Rate</span>
                    <span className="font-bold text-green-600">
                      {topPerformers.length > 0 
                        ? Math.max(...topPerformers.map(c => c.metrics.deflectionRate)).toFixed(1)
                        : 0
                      }%
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>Highest Single Savings</span>
                    <span className="font-bold text-blue-600">
                      ${topPerformers.length > 0 
                        ? Math.max(...topPerformers.map(c => c.metrics.totalSavings)).toLocaleString()
                        : 0
                      }
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Recent Activity</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <span>New Customers (7 days)</span>
                    <span className="font-bold">{metrics?.recentGrowth?.newCustomers || 0}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>Tickets Processed</span>
                    <span className="font-bold">{metrics?.recentGrowth?.totalTicketsProcessed || 0}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>Tickets Deflected</span>
                    <span className="font-bold text-green-600">{metrics?.recentGrowth?.totalTicketsDeflected || 0}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}