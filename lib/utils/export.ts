import jsPDF from 'jspdf';
import 'jspdf-autotable';

interface ExportData {
  title: string;
  metrics: Array<{
    label: string;
    value: string | number;
    change?: string;
  }>;
  charts?: Array<{
    title: string;
    data: Array<{ label: string; value: number }>;
  }>;
  insights?: string[];
}

export class PDFExporter {
  private doc: jsPDF;

  constructor() {
    this.doc = new jsPDF();
  }

  async exportDashboard(data: ExportData): Promise<Blob> {
    // Add header
    this.doc.setFontSize(24);
    this.doc.setTextColor(0, 102, 255);
    this.doc.text('SupportIQ Dashboard Report', 20, 30);

    this.doc.setFontSize(12);
    this.doc.setTextColor(100, 100, 100);
    this.doc.text(`Generated on ${new Date().toLocaleDateString()}`, 20, 40);

    // Add metrics
    this.doc.setFontSize(16);
    this.doc.setTextColor(0, 0, 0);
    this.doc.text('Key Metrics', 20, 60);

    let yPosition = 80;
    data.metrics.forEach((metric, index) => {
      if (yPosition > 250) {
        this.doc.addPage();
        yPosition = 20;
      }

      this.doc.setFontSize(12);
      this.doc.setTextColor(0, 0, 0);
      this.doc.text(metric.label, 20, yPosition);

      this.doc.setFontSize(14);
      this.doc.setTextColor(0, 102, 255);
      this.doc.text(String(metric.value), 120, yPosition);

      if (metric.change) {
        this.doc.setFontSize(10);
        this.doc.setTextColor(0, 150, 0);
        this.doc.text(metric.change, 180, yPosition);
      }

      yPosition += 15;
    });

    // Add insights
    if (data.insights && data.insights.length > 0) {
      if (yPosition > 200) {
        this.doc.addPage();
        yPosition = 20;
      }

      this.doc.setFontSize(16);
      this.doc.setTextColor(0, 0, 0);
      this.doc.text('AI Insights', 20, yPosition);
      yPosition += 20;

      data.insights.forEach((insight) => {
        if (yPosition > 250) {
          this.doc.addPage();
          yPosition = 20;
        }

        this.doc.setFontSize(10);
        this.doc.setTextColor(100, 100, 100);
        this.doc.text(`â€¢ ${insight}`, 20, yPosition);
        yPosition += 10;
      });
    }

    // Add charts if provided
    if (data.charts) {
      data.charts.forEach((chart, chartIndex) => {
        if (yPosition > 150) {
          this.doc.addPage();
          yPosition = 20;
        }

        this.doc.setFontSize(16);
        this.doc.setTextColor(0, 0, 0);
        this.doc.text(chart.title, 20, yPosition);
        yPosition += 20;

        // Create simple table for chart data
        const tableData = chart.data.map(item => [item.label, item.value.toString()]);
        
        (this.doc as any).autoTable({
          startY: yPosition,
          head: [['Category', 'Value']],
          body: tableData,
          theme: 'grid',
          headStyles: { fillColor: [0, 102, 255] },
          styles: { fontSize: 10 }
        });

        yPosition = (this.doc as any).lastAutoTable.finalY + 20;
      });
    }

    // Add footer
    this.doc.setFontSize(10);
    this.doc.setTextColor(150, 150, 150);
    this.doc.text('Generated by SupportIQ - AI-Powered Customer Support Analytics', 20, this.doc.internal.pageSize.height - 10);

    return this.doc.output('blob');
  }

  async exportROIReport(roiData: any): Promise<Blob> {
    this.doc.setFontSize(24);
    this.doc.setTextColor(0, 150, 0);
    this.doc.text('ROI Analysis Report', 20, 30);

    this.doc.setFontSize(12);
    this.doc.setTextColor(100, 100, 100);
    this.doc.text(`Generated on ${new Date().toLocaleDateString()}`, 20, 40);

    // Add ROI summary
    this.doc.setFontSize(16);
    this.doc.setTextColor(0, 0, 0);
    this.doc.text('ROI Summary', 20, 60);

    const summaryData = [
      ['Metric', 'Value'],
      ['Total Savings', `$${roiData.totalSavings?.toLocaleString() || 0}`],
      ['Monthly Savings', `$${roiData.monthlySavings?.toLocaleString() || 0}`],
      ['ROI', `${roiData.roi?.toFixed(0) || 0}%`],
      ['Payback Period', `${roiData.paybackPeriod?.toFixed(1) || 0} months`],
      ['Time Saved', `${roiData.timeSaved || 0} hours`],
      ['Tickets Deflected', roiData.ticketsDeflected || 0]
    ];

    (this.doc as any).autoTable({
      startY: 80,
      head: [['Metric', 'Value']],
      body: summaryData.slice(1),
      theme: 'grid',
      headStyles: { fillColor: [0, 150, 0] },
      styles: { fontSize: 12 }
    });

    return this.doc.output('blob');
  }

  async exportPerformanceReport(performanceData: any): Promise<Blob> {
    this.doc.setFontSize(24);
    this.doc.setTextColor(138, 92, 246);
    this.doc.text('Performance Report', 20, 30);

    this.doc.setFontSize(12);
    this.doc.setTextColor(100, 100, 100);
    this.doc.text(`Generated on ${new Date().toLocaleDateString()}`, 20, 40);

    // Add agent performance table
    this.doc.setFontSize(16);
    this.doc.setTextColor(0, 0, 0);
    this.doc.text('Agent Performance', 20, 60);

    if (performanceData.agents) {
      const agentData = performanceData.agents.map((agent: any) => [
        agent.name,
        agent.ticketsHandled,
        `${agent.avgResponseTime}m`,
        agent.satisfactionScore,
        `${agent.efficiency}%`
      ]);

      (this.doc as any).autoTable({
        startY: 80,
        head: [['Agent', 'Tickets', 'Response Time', 'Satisfaction', 'Efficiency']],
        body: agentData,
        theme: 'grid',
        headStyles: { fillColor: [138, 92, 246] },
        styles: { fontSize: 10 }
      });
    }

    return this.doc.output('blob');
  }
}

// Helper function to download PDF
export const downloadPDF = (blob: Blob, filename: string) => {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

// Helper function to export dashboard data
export const exportDashboardData = async (data: ExportData, filename: string = 'supportiq-dashboard.pdf') => {
  const exporter = new PDFExporter();
  const blob = await exporter.exportDashboard(data);
  downloadPDF(blob, filename);
};

// Helper function to export ROI report
export const exportROIReport = async (roiData: any, filename: string = 'supportiq-roi-report.pdf') => {
  const exporter = new PDFExporter();
  const blob = await exporter.exportROIReport(roiData);
  downloadPDF(blob, filename);
};

// Helper function to export performance report
export const exportPerformanceReport = async (performanceData: any, filename: string = 'supportiq-performance-report.pdf') => {
  const exporter = new PDFExporter();
  const blob = await exporter.exportPerformanceReport(performanceData);
  downloadPDF(blob, filename);
}; 